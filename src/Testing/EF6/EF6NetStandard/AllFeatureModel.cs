  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   public partial class AllPropertyTypesRequired
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected AllPropertyTypesRequired()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static AllPropertyTypesRequired CreateAllPropertyTypesRequiredUnsafe()
      {
         return new AllPropertyTypesRequired();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="binaryattr"></param>
      /// <param name="booleanattr"></param>
      /// <param name="byteattr"></param>
      /// <param name="datetimeattr"></param>
      /// <param name="datetimeoffsetattr"></param>
      /// <param name="decimalattr"></param>
      /// <param name="doubleattr"></param>
      /// <param name="guidattr"></param>
      /// <param name="int16attr"></param>
      /// <param name="int32attr"></param>
      /// <param name="int64attr"></param>
      /// <param name="singleattr"></param>
      /// <param name="timeattr"></param>
      /// <param name="stringattr"></param>
      public AllPropertyTypesRequired(byte[] binaryattr, bool booleanattr, byte byteattr, DateTime datetimeattr, DateTimeOffset datetimeoffsetattr, decimal decimalattr, double doubleattr, Guid guidattr, short int16attr, int int32attr, long int64attr, Single singleattr, TimeSpan timeattr, string stringattr)
      {
         this.BinaryAttr = binaryattr;

         this.BooleanAttr = booleanattr;

         this.ByteAttr = byteattr;

         this.DateTimeAttr = datetimeattr;

         this.DateTimeOffsetAttr = datetimeoffsetattr;

         this.DecimalAttr = decimalattr;

         this.DoubleAttr = doubleattr;

         this.GuidAttr = guidattr;

         this.Int16Attr = int16attr;

         this.Int32Attr = int32attr;

         this.Int64Attr = int64attr;

         this.SingleAttr = singleattr;

         this.TimeAttr = timeattr;

         if (string.IsNullOrEmpty(stringattr)) throw new ArgumentNullException(nameof(stringattr));
         this.StringAttr = stringattr;

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="binaryattr"></param>
      /// <param name="booleanattr"></param>
      /// <param name="byteattr"></param>
      /// <param name="datetimeattr"></param>
      /// <param name="datetimeoffsetattr"></param>
      /// <param name="decimalattr"></param>
      /// <param name="doubleattr"></param>
      /// <param name="guidattr"></param>
      /// <param name="int16attr"></param>
      /// <param name="int32attr"></param>
      /// <param name="int64attr"></param>
      /// <param name="singleattr"></param>
      /// <param name="timeattr"></param>
      /// <param name="stringattr"></param>
      public static AllPropertyTypesRequired Create(byte[] binaryattr, bool booleanattr, byte byteattr, DateTime datetimeattr, DateTimeOffset datetimeoffsetattr, decimal decimalattr, double doubleattr, Guid guidattr, short int16attr, int int32attr, long int64attr, Single singleattr, TimeSpan timeattr, string stringattr)
      {
         return new AllPropertyTypesRequired(binaryattr, booleanattr, byteattr, datetimeattr, datetimeoffsetattr, decimalattr, doubleattr, guidattr, int16attr, int32attr, int64attr, singleattr, timeattr, stringattr);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public byte[] BinaryAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public bool BooleanAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public byte ByteAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime DateTimeAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTimeOffset DateTimeOffsetAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public decimal DecimalAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public double DoubleAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public Guid GuidAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public short Int16Attr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public int Int32Attr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public long Int64Attr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public Single SingleAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public TimeSpan TimeAttr { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public string StringAttr { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   public partial class AllPropertyTypesOptional
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public AllPropertyTypesOptional()
      {
         Init();
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      public byte[] BinaryAttr { get; set; }

      public bool? BooleanAttr { get; set; }

      public byte? ByteAttr { get; set; }

      public DateTime? DateTimeAttr { get; set; }

      public DateTimeOffset? DateTimeOffsetAttr { get; set; }

      public decimal? DecimalAttr { get; set; }

      public double? DoubleAttr { get; set; }

      public Guid? GuidAttr { get; set; }

      public short? Int16Attr { get; set; }

      public int? Int32Attr { get; set; }

      public long? Int64Attr { get; set; }

      public Single? SingleAttr { get; set; }

      public TimeSpan? TimeAttr { get; set; }

      public string StringAttr { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   public partial class UParentRequired
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public UParentRequired()
      {
         UChildCollection = new System.Collections.ObjectModel.ObservableCollection<global::Testing.UChild>();
         UChildRequired = global::Testing.UChild.CreateUChildUnsafe();

         Init();
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::Testing.UChild UChildRequired { get; set; }

      public virtual ICollection<global::Testing.UChild> UChildCollection { get; private set; }

      public virtual global::Testing.UChild UChildOptional { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   /// <summary>
   /// x
   /// </summary>
   [System.ComponentModel.Description("x")]
   public partial class UParentOptional: global::Testing.HiddenEntity
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected UParentOptional(): base()
      {
         PropertyInChild = "hello";
         UChildCollection = new System.Collections.ObjectModel.ObservableCollection<global::Testing.UChild>();
         UChildRequired = global::Testing.UChild.CreateUChildUnsafe();

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static UParentOptional CreateUParentOptionalUnsafe()
      {
         return new UParentOptional();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="uchildrequired"></param>
      public UParentOptional(global::Testing.UChild uchildrequired)
      {
         this.PropertyInChild = "hello";
         if (uchildrequired == null) throw new ArgumentNullException(nameof(uchildrequired));
         this.UChildRequired = uchildrequired;

         this.UChildCollection = new System.Collections.ObjectModel.ObservableCollection<global::Testing.UChild>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="uchildrequired"></param>
      public static UParentOptional Create(global::Testing.UChild uchildrequired)
      {
         return new UParentOptional(uchildrequired);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Default value = &quot;hello&quot;
      /// </summary>
      public string PropertyInChild { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// x
      /// </summary>
      [Description("x")]
      public virtual global::Testing.UChild UChildOptional { get; set; }

      /// <summary>
      /// h
      /// </summary>
      [Description("h")]
      public virtual ICollection<global::Testing.UChild> UChildCollection { get; private set; }

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::Testing.UChild UChildRequired { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   public partial class UParentCollection
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected UParentCollection()
      {
         UChildCollection = new System.Collections.ObjectModel.ObservableCollection<global::Testing.UChild>();
         UChildRequired = global::Testing.UChild.CreateUChildUnsafe();

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static UParentCollection CreateUParentCollectionUnsafe()
      {
         return new UParentCollection();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="uchildrequired"></param>
      public UParentCollection(global::Testing.UChild uchildrequired)
      {
         if (uchildrequired == null) throw new ArgumentNullException(nameof(uchildrequired));
         this.UChildRequired = uchildrequired;

         this.UChildCollection = new System.Collections.ObjectModel.ObservableCollection<global::Testing.UChild>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="uchildrequired"></param>
      public static UParentCollection Create(global::Testing.UChild uchildrequired)
      {
         return new UParentCollection(uchildrequired);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::Testing.UChild UChildRequired { get; set; }

      public virtual ICollection<global::Testing.UChild> UChildCollection { get; private set; }

      public virtual global::Testing.UChild UChildOptional { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Data.Entity.Spatial;

namespace Testing
{
   public partial class UChild
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected UChild()
      {
         // NOTE: This class has one-to-one associations with UChild.
         // One-to-one associations are not validated in constructors since this causes a scenario where each one must be constructed before the other.

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static UChild CreateUChildUnsafe()
      {
         return new UChild();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
