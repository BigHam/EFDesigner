//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v2.1.0.5
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Testing
{
   public partial class Master
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Master()
      {
         ToMany = new System.Collections.Generic.HashSet<global::Testing.Detail>();

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Master CreateMasterUnsafe()
      {
         return new Master();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="toone"></param>
      public Master(global::Testing.Detail toone)
      {
         if (toone == null) throw new ArgumentNullException(nameof(toone));
         this.ToOne = toone;

         this.ToMany = new System.Collections.Generic.HashSet<global::Testing.Detail>();

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="toone"></param>
      public static Master Create(global::Testing.Detail toone)
      {
         return new Master(toone);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; protected set; }

      /// <summary>
      /// Backing field for Property1_FDC
      /// </summary>
      protected int? _property1_FDC;
      /// <summary>
      /// When provided in a partial class, allows value of Property1_FDC to be changed before setting.
      /// </summary>
      partial void SetProperty1_FDC(int? oldValue, ref int? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Property1_FDC to be changed before returning.
      /// </summary>
      partial void GetProperty1_FDC(ref int? result);

      public int? Property1_FDC
      {
         get
         {
            int? value = _property1_FDC;
            GetProperty1_FDC(ref value);
            return (_property1_FDC = value);
         }
         set
         {
            int? oldValue = _property1_FDC;
            SetProperty1_FDC(oldValue, ref value);
            if (oldValue != value)
            {
               _property1_FDC = value;
            }
         }
      }

      public int? Property2_FA { get; set; }

      public int? Property3_PA { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      public virtual ICollection<global::Testing.Detail> ToMany { get; protected set; }

      public virtual global::Testing.Detail ToZeroOrOne { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::Testing.Detail ToOne { get; set; }

   }
}

