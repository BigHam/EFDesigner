//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v2.1.0.5
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Testing
{
   /// <inheritdoc/>
   public partial class AllFeatureModel : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Testing.Detail> Details { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Testing.Master> Masters { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=Test;Integrated Security=True";

      /// <inheritdoc />
      public AllFeatureModel(DbContextOptions<AllFeatureModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         optionsBuilder.UseLazyLoadingProxies().UseChangeTrackingProxies(false);

         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Testing.Detail>().ToTable("Details").HasKey(t => t.Id);
         modelBuilder.Entity<global::Testing.Detail>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();

         modelBuilder.Entity<global::Testing.Master>().ToTable("Masters").HasKey(t => t.Id);
         modelBuilder.Entity<global::Testing.Master>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Testing.Master>().Property(t => t.Property1_FDC).HasField("_property1_FDC").UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction);
         modelBuilder.Entity<global::Testing.Master>().HasMany(x => x.ToMany).WithMany("Master_x_ToMany").UsingEntity(x => x.ToTable("Master_x_ToMany"));
         modelBuilder.Entity<global::Testing.Master>().HasOne(x => x.ToZeroOrOne).WithMany().HasForeignKey("ToZeroOrOne_Id");
         modelBuilder.Entity<global::Testing.Master>().HasOne(x => x.ToOne).WithMany().HasForeignKey("ToOne_Id");

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
