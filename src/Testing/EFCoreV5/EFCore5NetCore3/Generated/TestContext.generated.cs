//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.0.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace EFCore5NetCore3
{
   /// <inheritdoc/>
   public partial class TestContext : DbContext
   {
      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=Test;Integrated Security=True";

      /// <inheritdoc />
      public TestContext(DbContextOptions<TestContext> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         optionsBuilder.UseLazyLoadingProxies();

         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail1 => Set<Dictionary<string, object>>("Detail1");
      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail2 => Set<Dictionary<string, object>>("Detail2");
      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail3 => Set<Dictionary<string, object>>("Detail3");
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::EFCore5NetCore3.Master> Masters { get; set; }

      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").IndexerProperty<Int64>("Id").IsRequired();
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").IndexerProperty<String>("Property1");
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").ToTable("Detail1").HasKey("Id");

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").IndexerProperty<Int64>("Id").IsRequired();
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").IndexerProperty<String>("Property1");
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").ToTable("Detail2").HasKey("Id");

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail3").IndexerProperty<Int64>("Id").IsRequired();
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail3").IndexerProperty<String>("Property1");
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail3").ToTable("Detail3").HasKey("Id");

         modelBuilder.Entity<global::EFCore5NetCore3.Master>().ToTable("Masters").HasKey(t => t.Id);
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();

         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasOne("Detail1", "ToZeroOrOneDetail1")
            .WithOne("B")
            .HasForeignKey("Detail1", "B_Id")
            .IsRequired()
            .OnDelete(DeleteBehavior.NoAction);

         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasOne("Detail1", "ToOneDetail1")
            .WithOne("A")
            .HasForeignKey("Detail1", "A_Id")
            .IsRequired()
            .OnDelete(DeleteBehavior.NoAction);
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().Navigation(x => x.ToOneDetail1).IsRequired();

         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasMany("Detail1", "ToManyDetail1")
            .WithOne("C")
            .HasForeignKey("Detail1", "C_Id")
            .IsRequired()
            .OnDelete(DeleteBehavior.NoAction);

         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasOne("Detail2", "ToZeroOrOneDetail2").WithOne("B")
            .HasForeignKey("Detail2", "B_Id");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasMany("Detail2", "ToManyDetail2").WithOne("C")
            .HasForeignKey("Detail2", "C_Id");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>()
            .HasOne("Detail2", "ToOneDetail2").WithOne("A")
            .HasForeignKey("Detail2", "A_Id");

         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne("Detail3", "ToZeroOrOneDetail3").WithMany("B");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne("Detail3", "ToOneDetail3").WithMany("A");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasMany("Detail3", "ToManyDetail3").WithMany("C").UsingEntity(x => x.ToTable("ToManyDetail3_x_ToManyDetail3"));

         OnModelCreatedImpl(modelBuilder);
      }

      //public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Products => Set<Dictionary<string, object>>("Product");
      //public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Categories => Set<Dictionary<string, object>>("Category");

      //public DbSet<Dictionary<string, object>> Products => Set<Dictionary<string, object>>("Product");
      //public DbSet<Dictionary<string, object>> Categories => Set<Dictionary<string, object>>("Category");

      //protected override void OnModelCreating(ModelBuilder modelBuilder)
      //{
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Category").IndexerProperty<string>("Description");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Category").IndexerProperty<int>("Id");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Category").IndexerProperty<string>("Name").IsRequired();
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Category").ToTable("Category").HasKey("Id");

      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").IndexerProperty<int>("Id");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").IndexerProperty<string>("Name").IsRequired();
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").IndexerProperty<string>("Description");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").IndexerProperty<decimal>("Price");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").IndexerProperty<int?>("CategoryId");
      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").ToTable("Product").HasKey("Id");

      //   modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Product").HasOne("Category", null).WithMany();
      //}

   }
}
