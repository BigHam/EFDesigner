//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.0.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace EFCore5NetCore3
{
   /// <inheritdoc/>
   public partial class UnidirectionalAssociationTestContext : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail1 => Set<Dictionary<string, object>>("Detail1");
      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail2 => Set<Dictionary<string, object>>("Detail2");
      public virtual Microsoft.EntityFrameworkCore.DbSet<Dictionary<string, object>> Detail3 => Set<Dictionary<string, object>>("Detail3");
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::EFCore5NetCore3.Master> Masters { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=Test;Integrated Security=True";

      /// <inheritdoc />
      public UnidirectionalAssociationTestContext(DbContextOptions<UnidirectionalAssociationTestContext> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").ToTable("Detail1").HasKey(t => t.Id);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").HasIndex(t => t.Fa);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").HasIndex(t => t.Fb);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail1").HasIndex(t => t.Fc);

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").ToTable("Detail2").HasKey(t => t.Id);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").HasIndex(t => t.Fc);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail2").HasIndex(t => t.Fb);

         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Detail3").ToTable("Detail3").HasKey(t => t.Id);

         modelBuilder.Entity<global::EFCore5NetCore3.Master>().ToTable("Masters").HasKey(t => t.Id);
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().Property(t => t.Fa).IsRequired();
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Master").HasIndex(t => t.Fa);
         modelBuilder.SharedTypeEntity<Dictionary<string, object>>("Master").HasIndex(t => t.Fb);
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToZeroOrOneDetail1).WithOne().HasForeignKey<global::EFCore5NetCore3.Detail1>("Fb").OnDelete(DeleteBehavior.NoAction).IsRequired();
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToOneDetail1).WithOne().HasForeignKey<global::EFCore5NetCore3.Detail1>("Fa").OnDelete(DeleteBehavior.NoAction).IsRequired();
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().Navigation(x => x.ToOneDetail1).IsRequired();
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasMany(x => x.ToManyDetail1).WithOne().HasForeignKey("Fc").OnDelete(DeleteBehavior.NoAction).IsRequired();
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToZeroOrOneDetail3).WithMany().HasForeignKey("Fb");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToOneDetail3).WithMany().HasForeignKey("Fa");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToZeroOrOneDetail2).WithOne().HasForeignKey<global::EFCore5NetCore3.Detail2>("Fb");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasMany(x => x.ToManyDetail2).WithOne().HasForeignKey("Fc");
         modelBuilder.Entity<global::EFCore5NetCore3.Master>().HasOne(x => x.ToOneDetail2).WithOne().HasForeignKey<global::EFCore5NetCore3.Master>("Fa");

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
